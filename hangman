#!/bin/bash
# bash hangman
# kon, 2008
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# file containing the wordnik api key ( http://developer.wordnik.com/ )
api_key=$(<~/.wordnik-api-key)

function getrandomword(){
    extractor='grep -oP '\''(?<=\"word\":\").*(?=\")'\'
    if grep --version | grep BSD >/dev/null; then
        extractor='sed -E -e '\''s/.*"word":"([^"]+).*/\1/g'\'
    fi
    wget -qO- "http://api.wordnik.com:80/v4/words.json/randomWords\
?hasDictionaryDef=true\
&minLength=7\
&maxLength=12\
&limit=1\
&api_key=${api_key}" \
    | eval $extractor
}

function hanger() {
  case $1 in
  0)
  foo='
    ________
    |/      |
    |      (_)
    |      \|/
    |       |
    |      / \
'

  bar='
    ________
    |/      |
    |      (_)
    |      -|-
    |       |
    |      - -
'
for i in 1 2 3 4; do
  clear; echo "$foo"; sleep 0.2; clear; echo "$bar"; sleep 0.2;
done
clear
foo=$'
__   __                            ______ _____  ___ ______ _
\ \ / /                            |  _  \  ___|/ _ \|  _  \ |
 \ V /___  _   _    __ _ _ __ ___  | | | | |__ / /_\ \ | | | |
  \ // _ \| | | |  / _` | `__/ _ \ | | | |  __||  _  | | | | |
  | | (_) | |_| | | (_| | | |  __/ | |/ /| |___| | | | |/ /|_|
  \_/\___/ \__,_|  \__,_|_|  \___| |___/ \____/\_| |_/___/ (_)
 ___________.._______
| ,__________))______|
| | / /       ||
| |/ /       ||
| | /        ||.---.
| |/         |/  _  \
| |          ||  `/,|
| |          (\\`_.\'
| |         .-`--\'.
| |        /Y . . Y\
| |       // |   | \\
| |      //  | . |  \\
| |     (\')  | _ |  (\')
| |          || ||
| |          || ||
| |          || ||
| |          || ||
| |         / | | \
""""""""""|_`-\' `-\' |"""|
|"|"""""""\ \       \'"|"|
| |        \ \        | |
: :         \ \       : :  sk
. .          ``       . . '
echo "$foo"
echo "the word was \"$tmp\", you didn't get the characters \"$word\"";
exit 1;
  ;;

  1)
    foo='
    ________
    |/      |
    |      (_)
    |      \|/
    |       |
    |      /
'
  ;;

  2)
    foo='
    ________
    |/      |
    |      (_)
    |      \|/
    |       |
    |
'
  ;;

  3)
    foo='
    ________
    |/      |
    |      (_)
    |      \|/
    |
    |
'
  ;;

  4)
    foo='
    ________
    |/      |
    |      (_)
    |      \|
    |
    |
'
  ;;

  5)
    foo='
    ________
    |/      |
    |      (_)
    |      \
    |
    |
'
  ;;

  6)
    foo='
    ________
    |/      |
    |      (_)
    |
    |
    |
'
  ;;

  7)
    foo='
    ________
    |/      |
    |      (_
    |
    |
    |
'
  ;;

  8)
    foo='
    ________
    |/      |
    |      (
    |
    |
    |
'
  ;;

  9)
    foo='
    ________
    |/      |
    |
    |
    |
    |
'
  ;;

  10)
    foo='
    ________
    |/
    |
    |
    |
    |
'
  ;; esac
  echo "$foo"
}

function trappy(){
  echo; read -n1 -p "press q to quit, any other key + enter to resume " key; echo
  [[ $key == 'q' ]] && exit 1
}
trap 'trappy' 2

function init(){
  lifes=10
  read -p "# of players [1]: " players
  if(($players > 1)) &> /dev/null; then
    players=2;
    read -s -p "enter the word: " word
    word=$(tr A-Z a-z <<< $word)
  else
    players=1;
    if [[ -e words ]]; then # if there is a wordlist file "words"
      set $(<words)         # select a random word from it
      word=$(eval echo \$$((RANDOM%${#*})) | tr A-Z a-z)
    else
      word=`getrandomword` # fetch a random word online
    fi
  fi
  tmp=$word
}

function gameloop(){
  while((lifes > -1)); do
    clear
    hanger $lifes
    if ((${#usedChars} > 0)) ; then
      echo "already used letters: $usedChars"
    fi
    for i in `seq 0 $((${#tmp}-1))`; do
      char=${tmp:$i:1}
      if grep -i $char <<< $usedChars &> /dev/null; then
        echo -n "$char "
      else
        echo -n "_ "
      fi
    done
    echo #just a newline
    echo "lifes: $lifes"
    read -p "letter: " letter
    letter=$(tr A-Z a-z <<< $letter)
    letter=${letter::1}
    while grep -i "$letter" <<< $usedChars &> /dev/null; do
      read -p "omg, we already had that... letter: " letter
      letter=$(tr A-Z a-z <<< $letter)
      letter=${letter::1}
    done

    if grep -i "$letter" <<< $word &> /dev/null; then
      word=${word//$letter/}
    else
      ((--lifes))
    fi
    if ((${#letter} == 0)); then
      ((lifes++))
    else
        usedChars="${usedChars} ${letter}"
    fi
    if ((${#word} == 0)); then
      echo "YOU GOT IT!"
      exit 0;
    fi
  done
}
init;
gameloop;

